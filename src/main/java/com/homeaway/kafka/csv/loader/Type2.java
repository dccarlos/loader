/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.homeaway.kafka.csv.loader;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Type2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7655998657335120858L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Type2\",\"namespace\":\"com.homeaway.kafka.csv.loader\",\"fields\":[{\"name\":\"Code\",\"type\":\"string\"},{\"name\":\"Description\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Type2> ENCODER =
      new BinaryMessageEncoder<Type2>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Type2> DECODER =
      new BinaryMessageDecoder<Type2>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Type2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Type2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Type2>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Type2 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Type2 from a ByteBuffer. */
  public static Type2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence Code;
  @Deprecated public java.lang.CharSequence Description;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Type2() {}

  /**
   * All-args constructor.
   * @param Code The new value for Code
   * @param Description The new value for Description
   */
  public Type2(java.lang.CharSequence Code, java.lang.CharSequence Description) {
    this.Code = Code;
    this.Description = Description;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Code;
    case 1: return Description;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Code = (java.lang.CharSequence)value$; break;
    case 1: Description = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Code' field.
   * @return The value of the 'Code' field.
   */
  public java.lang.CharSequence getCode() {
    return Code;
  }

  /**
   * Sets the value of the 'Code' field.
   * @param value the value to set.
   */
  public void setCode(java.lang.CharSequence value) {
    this.Code = value;
  }

  /**
   * Gets the value of the 'Description' field.
   * @return The value of the 'Description' field.
   */
  public java.lang.CharSequence getDescription() {
    return Description;
  }

  /**
   * Sets the value of the 'Description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.Description = value;
  }

  /**
   * Creates a new Type2 RecordBuilder.
   * @return A new Type2 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type2.Builder newBuilder() {
    return new com.homeaway.kafka.csv.loader.Type2.Builder();
  }

  /**
   * Creates a new Type2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Type2 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type2.Builder newBuilder(com.homeaway.kafka.csv.loader.Type2.Builder other) {
    return new com.homeaway.kafka.csv.loader.Type2.Builder(other);
  }

  /**
   * Creates a new Type2 RecordBuilder by copying an existing Type2 instance.
   * @param other The existing instance to copy.
   * @return A new Type2 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type2.Builder newBuilder(com.homeaway.kafka.csv.loader.Type2 other) {
    return new com.homeaway.kafka.csv.loader.Type2.Builder(other);
  }

  /**
   * RecordBuilder for Type2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Type2>
    implements org.apache.avro.data.RecordBuilder<Type2> {

    private java.lang.CharSequence Code;
    private java.lang.CharSequence Description;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.homeaway.kafka.csv.loader.Type2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Code)) {
        this.Code = data().deepCopy(fields()[0].schema(), other.Code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Description)) {
        this.Description = data().deepCopy(fields()[1].schema(), other.Description);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Type2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.homeaway.kafka.csv.loader.Type2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Code)) {
        this.Code = data().deepCopy(fields()[0].schema(), other.Code);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Description)) {
        this.Description = data().deepCopy(fields()[1].schema(), other.Description);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'Code' field.
      * @return The value.
      */
    public java.lang.CharSequence getCode() {
      return Code;
    }

    /**
      * Sets the value of the 'Code' field.
      * @param value The value of 'Code'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type2.Builder setCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Code = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Code' field has been set.
      * @return True if the 'Code' field has been set, false otherwise.
      */
    public boolean hasCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Code' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type2.Builder clearCode() {
      Code = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Description' field.
      * @return The value.
      */
    public java.lang.CharSequence getDescription() {
      return Description;
    }

    /**
      * Sets the value of the 'Description' field.
      * @param value The value of 'Description'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type2.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Description = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Description' field has been set.
      * @return True if the 'Description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Description' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type2.Builder clearDescription() {
      Description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Type2 build() {
      try {
        Type2 record = new Type2();
        record.Code = fieldSetFlags()[0] ? this.Code : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Description = fieldSetFlags()[1] ? this.Description : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Type2>
    WRITER$ = (org.apache.avro.io.DatumWriter<Type2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Type2>
    READER$ = (org.apache.avro.io.DatumReader<Type2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
