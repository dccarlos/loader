/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.homeaway.kafka.csv.loader;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Type1 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7639284335304691252L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Type1\",\"namespace\":\"com.homeaway.kafka.csv.loader\",\"fields\":[{\"name\":\"iata\",\"type\":\"string\"},{\"name\":\"airport\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":\"string\"},{\"name\":\"longitude\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Type1> ENCODER =
      new BinaryMessageEncoder<Type1>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Type1> DECODER =
      new BinaryMessageDecoder<Type1>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Type1> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Type1> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Type1>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Type1 to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Type1 from a ByteBuffer. */
  public static Type1 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence iata;
  @Deprecated public java.lang.CharSequence airport;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence latitude;
  @Deprecated public java.lang.CharSequence longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Type1() {}

  /**
   * All-args constructor.
   * @param iata The new value for iata
   * @param airport The new value for airport
   * @param city The new value for city
   * @param state The new value for state
   * @param country The new value for country
   * @param latitude The new value for latitude
   * @param longitude The new value for longitude
   */
  public Type1(java.lang.CharSequence iata, java.lang.CharSequence airport, java.lang.CharSequence city, java.lang.CharSequence state, java.lang.CharSequence country, java.lang.CharSequence latitude, java.lang.CharSequence longitude) {
    this.iata = iata;
    this.airport = airport;
    this.city = city;
    this.state = state;
    this.country = country;
    this.latitude = latitude;
    this.longitude = longitude;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return iata;
    case 1: return airport;
    case 2: return city;
    case 3: return state;
    case 4: return country;
    case 5: return latitude;
    case 6: return longitude;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: iata = (java.lang.CharSequence)value$; break;
    case 1: airport = (java.lang.CharSequence)value$; break;
    case 2: city = (java.lang.CharSequence)value$; break;
    case 3: state = (java.lang.CharSequence)value$; break;
    case 4: country = (java.lang.CharSequence)value$; break;
    case 5: latitude = (java.lang.CharSequence)value$; break;
    case 6: longitude = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'iata' field.
   * @return The value of the 'iata' field.
   */
  public java.lang.CharSequence getIata() {
    return iata;
  }

  /**
   * Sets the value of the 'iata' field.
   * @param value the value to set.
   */
  public void setIata(java.lang.CharSequence value) {
    this.iata = value;
  }

  /**
   * Gets the value of the 'airport' field.
   * @return The value of the 'airport' field.
   */
  public java.lang.CharSequence getAirport() {
    return airport;
  }

  /**
   * Sets the value of the 'airport' field.
   * @param value the value to set.
   */
  public void setAirport(java.lang.CharSequence value) {
    this.airport = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }

  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'latitude' field.
   * @return The value of the 'latitude' field.
   */
  public java.lang.CharSequence getLatitude() {
    return latitude;
  }

  /**
   * Sets the value of the 'latitude' field.
   * @param value the value to set.
   */
  public void setLatitude(java.lang.CharSequence value) {
    this.latitude = value;
  }

  /**
   * Gets the value of the 'longitude' field.
   * @return The value of the 'longitude' field.
   */
  public java.lang.CharSequence getLongitude() {
    return longitude;
  }

  /**
   * Sets the value of the 'longitude' field.
   * @param value the value to set.
   */
  public void setLongitude(java.lang.CharSequence value) {
    this.longitude = value;
  }

  /**
   * Creates a new Type1 RecordBuilder.
   * @return A new Type1 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type1.Builder newBuilder() {
    return new com.homeaway.kafka.csv.loader.Type1.Builder();
  }

  /**
   * Creates a new Type1 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Type1 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type1.Builder newBuilder(com.homeaway.kafka.csv.loader.Type1.Builder other) {
    return new com.homeaway.kafka.csv.loader.Type1.Builder(other);
  }

  /**
   * Creates a new Type1 RecordBuilder by copying an existing Type1 instance.
   * @param other The existing instance to copy.
   * @return A new Type1 RecordBuilder
   */
  public static com.homeaway.kafka.csv.loader.Type1.Builder newBuilder(com.homeaway.kafka.csv.loader.Type1 other) {
    return new com.homeaway.kafka.csv.loader.Type1.Builder(other);
  }

  /**
   * RecordBuilder for Type1 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Type1>
    implements org.apache.avro.data.RecordBuilder<Type1> {

    private java.lang.CharSequence iata;
    private java.lang.CharSequence airport;
    private java.lang.CharSequence city;
    private java.lang.CharSequence state;
    private java.lang.CharSequence country;
    private java.lang.CharSequence latitude;
    private java.lang.CharSequence longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.homeaway.kafka.csv.loader.Type1.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.iata)) {
        this.iata = data().deepCopy(fields()[0].schema(), other.iata);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.airport)) {
        this.airport = data().deepCopy(fields()[1].schema(), other.airport);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.latitude)) {
        this.latitude = data().deepCopy(fields()[5].schema(), other.latitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Type1 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.homeaway.kafka.csv.loader.Type1 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.iata)) {
        this.iata = data().deepCopy(fields()[0].schema(), other.iata);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.airport)) {
        this.airport = data().deepCopy(fields()[1].schema(), other.airport);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.city)) {
        this.city = data().deepCopy(fields()[2].schema(), other.city);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.country)) {
        this.country = data().deepCopy(fields()[4].schema(), other.country);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.latitude)) {
        this.latitude = data().deepCopy(fields()[5].schema(), other.latitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.longitude)) {
        this.longitude = data().deepCopy(fields()[6].schema(), other.longitude);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'iata' field.
      * @return The value.
      */
    public java.lang.CharSequence getIata() {
      return iata;
    }

    /**
      * Sets the value of the 'iata' field.
      * @param value The value of 'iata'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setIata(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.iata = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'iata' field has been set.
      * @return True if the 'iata' field has been set, false otherwise.
      */
    public boolean hasIata() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'iata' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearIata() {
      iata = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'airport' field.
      * @return The value.
      */
    public java.lang.CharSequence getAirport() {
      return airport;
    }

    /**
      * Sets the value of the 'airport' field.
      * @param value The value of 'airport'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setAirport(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.airport = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'airport' field has been set.
      * @return True if the 'airport' field has been set, false otherwise.
      */
    public boolean hasAirport() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'airport' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearAirport() {
      airport = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }

    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.city = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearCity() {
      city = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }

    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }

    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.country = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearCountry() {
      country = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'latitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLatitude() {
      return latitude;
    }

    /**
      * Sets the value of the 'latitude' field.
      * @param value The value of 'latitude'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setLatitude(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.latitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'latitude' field has been set.
      * @return True if the 'latitude' field has been set, false otherwise.
      */
    public boolean hasLatitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'latitude' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearLatitude() {
      latitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'longitude' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongitude() {
      return longitude;
    }

    /**
      * Sets the value of the 'longitude' field.
      * @param value The value of 'longitude'.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder setLongitude(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.longitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'longitude' field has been set.
      * @return True if the 'longitude' field has been set, false otherwise.
      */
    public boolean hasLongitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'longitude' field.
      * @return This builder.
      */
    public com.homeaway.kafka.csv.loader.Type1.Builder clearLongitude() {
      longitude = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Type1 build() {
      try {
        Type1 record = new Type1();
        record.iata = fieldSetFlags()[0] ? this.iata : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.airport = fieldSetFlags()[1] ? this.airport : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.city = fieldSetFlags()[2] ? this.city : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.country = fieldSetFlags()[4] ? this.country : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.latitude = fieldSetFlags()[5] ? this.latitude : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.longitude = fieldSetFlags()[6] ? this.longitude : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Type1>
    WRITER$ = (org.apache.avro.io.DatumWriter<Type1>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Type1>
    READER$ = (org.apache.avro.io.DatumReader<Type1>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
